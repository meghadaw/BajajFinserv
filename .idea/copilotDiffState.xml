<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Compiled class file&#10;*.class&#10;&#10;# Log file&#10;*.log&#10;&#10;# BlueJ files&#10;*.ctxt&#10;&#10;# Mobile Tools for Java (J2ME)&#10;.mtj.tmp/&#10;&#10;# Package Files #&#10;*.jar&#10;*.war&#10;*.nar&#10;*.ear&#10;*.zip&#10;*.tar.gz&#10;*.rar&#10;&#10;# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml&#10;hs_err_pid*&#10;replay_pid*&#10;&#10;# Maven&#10;target/&#10;!target/qualifier-test-0.0.1-SNAPSHOT.jar&#10;pom.xml.tag&#10;pom.xml.releaseBackup&#10;pom.xml.versionsBackup&#10;pom.xml.next&#10;release.properties&#10;dependency-reduced-pom.xml&#10;buildNumber.properties&#10;.mvn/timing.properties&#10;.mvn/wrapper/maven-wrapper.jar&#10;&#10;# IDE&#10;.idea/&#10;*.iws&#10;*.iml&#10;*.ipr&#10;.vscode/&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# OS&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Spring Boot&#10;spring-boot*.log" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Bajaj Finserv Health Qualifier Test&#10;&#10;This is a Spring Boot application that solves the Bajaj Finserv Health qualifier test for Java developers.&#10;&#10;## Overview&#10;&#10;The application automatically:&#10;1. Generates a webhook by sending a POST request on startup&#10;2. Solves SQL Question 2 (calculating younger employees count by department)&#10;3. Submits the solution using JWT authentication&#10;&#10;## Features&#10;&#10;- **Java 17 &amp; Spring Boot 3.3.3**: Modern Java features with latest Spring Boot&#10;- **Automatic Execution**: No manual triggers needed - runs on application startup&#10;- **SQL Solution**: Implements solution for Question 2 using text blocks&#10;- **REST API Integration**: Uses RestTemplate for webhook communication&#10;- **JWT Authentication**: Proper authorization headers for solution submission&#10;&#10;## SQL Solution (Question 2)&#10;&#10;The application solves the problem of calculating the number of employees who are younger than each employee, grouped by their respective departments:&#10;&#10;```sql&#10;SELECT &#10;    e1.EMP_ID,&#10;    e1.FIRST_NAME,&#10;    e1.LAST_NAME,&#10;    d.DEPARTMENT_NAME,&#10;    COUNT(e2.EMP_ID) AS YOUNGER_EMPLOYEES_COUNT&#10;FROM EMPLOYEE e1&#10;JOIN DEPARTMENT d ON e1.DEPARTMENT = d.DEPARTMENT_ID&#10;LEFT JOIN EMPLOYEE e2 ON e1.DEPARTMENT = e2.DEPARTMENT &#10;    AND e2.DOB &gt; e1.DOB&#10;GROUP BY e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, d.DEPARTMENT_NAME&#10;ORDER BY e1.EMP_ID DESC&#10;```&#10;&#10;## Requirements&#10;&#10;- Java 17 or higher&#10;- Maven 3.6+&#10;&#10;## How to Run&#10;&#10;1. **Download the JAR file** (see releases section)&#10;2. **Update your details** in `QualifierService.java`:&#10;   - Replace `NAME`, `REG_NO`, and `EMAIL` with your actual details&#10;3. **Run the application**:&#10;   ```bash&#10;   java -jar qualifier-test-0.0.1-SNAPSHOT.jar&#10;   ```&#10;&#10;## Build from Source&#10;&#10;```bash&#10;# Clone the repository&#10;git clone https://github.com/YOUR_USERNAME/bajaj-finserv-qualifier.git&#10;cd bajaj-finserv-qualifier&#10;&#10;# Build the project&#10;mvn clean package -DskipTests&#10;&#10;# Run the application&#10;java -jar target/qualifier-test-0.0.1-SNAPSHOT.jar&#10;```&#10;&#10;## Configuration&#10;&#10;The application uses the following configuration in `application.properties`:&#10;- Logging levels for debugging&#10;- H2 database for local testing (optional)&#10;&#10;## Project Structure&#10;&#10;```&#10;src/&#10;├── main/&#10;│   ├── java/&#10;│   │   └── com/bajajfinserv/qualifier/&#10;│   │       ├── QualifierTestApplication.java&#10;│   │       ├── config/AppConfig.java&#10;│   │       ├── dto/&#10;│   │       │   ├── SolutionRequest.java&#10;│   │       │   ├── WebhookRequest.java&#10;│   │       │   └── WebhookResponse.java&#10;│   │       └── service/QualifierService.java&#10;│   └── resources/&#10;│       └── application.properties&#10;└── target/&#10;    └── qualifier-test-0.0.1-SNAPSHOT.jar&#10;```&#10;&#10;## API Endpoints Used&#10;&#10;1. **Webhook Generation**: `POST https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA`&#10;2. **Solution Submission**: `POST https://bfhldevapigw.healthrx.co.in/hiring/testWebhook/JAVA`&#10;&#10;## License&#10;&#10;This project is created for the Bajaj Finserv Health qualifier test." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.0&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;    &lt;groupId&gt;com.bajajfinserv&lt;/groupId&gt;&#10;    &lt;artifactId&gt;qualifier-test&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;name&gt;qualifier-test&lt;/name&gt;&#10;    &lt;description&gt;Bajaj Finserv Health Qualifier Test&lt;/description&gt;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.3.3&lt;/version&gt;&#10;        &lt;relativePath/&gt;&#10;    &lt;/parent&gt;&#10;    &lt;groupId&gt;com.bajajfinserv&lt;/groupId&gt;&#10;    &lt;artifactId&gt;qualifier-test&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;name&gt;qualifier-test&lt;/name&gt;&#10;    &lt;description&gt;Bajaj Finserv Health Qualifier Test&lt;/description&gt;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;        &lt;maven.compiler.release&gt;17&lt;/maven.compiler.release&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/QualifierTestApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/QualifierTestApplication.java" />
              <option name="updatedContent" value="package com.bajajfinserv.qualifier;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class QualifierTestApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(QualifierTestApplication.class, args);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/config/AppConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/config/AppConfig.java" />
              <option name="updatedContent" value="package com.bajajfinserv.qualifier.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;@Configuration&#10;public class AppConfig {&#10;&#10;    @Bean&#10;    public RestTemplate restTemplate() {&#10;        return new RestTemplate();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/dto/SolutionRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/dto/SolutionRequest.java" />
              <option name="updatedContent" value="package com.bajajfinserv.qualifier.dto;&#10;&#10;public class SolutionRequest {&#10;    private String finalQuery;&#10;&#10;    public SolutionRequest() {}&#10;&#10;    public SolutionRequest(String finalQuery) {&#10;        this.finalQuery = finalQuery;&#10;    }&#10;&#10;    // Getters and setters&#10;    public String getFinalQuery() {&#10;        return finalQuery;&#10;    }&#10;&#10;    public void setFinalQuery(String finalQuery) {&#10;        this.finalQuery = finalQuery;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/dto/WebhookRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/dto/WebhookRequest.java" />
              <option name="updatedContent" value="package com.bajajfinserv.qualifier.dto;&#10;&#10;public class WebhookRequest {&#10;    private String name;&#10;    private String regNo;&#10;    private String email;&#10;&#10;    public WebhookRequest() {}&#10;&#10;    public WebhookRequest(String name, String regNo, String email) {&#10;        this.name = name;&#10;        this.regNo = regNo;&#10;        this.email = email;&#10;    }&#10;&#10;    // Getters and setters&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getRegNo() {&#10;        return regNo;&#10;    }&#10;&#10;    public void setRegNo(String regNo) {&#10;        this.regNo = regNo;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/dto/WebhookResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/dto/WebhookResponse.java" />
              <option name="updatedContent" value="package com.bajajfinserv.qualifier.dto;&#10;&#10;public class WebhookResponse {&#10;    private String webhook;&#10;    private String accessToken;&#10;&#10;    public WebhookResponse() {}&#10;&#10;    // Getters and setters&#10;    public String getWebhook() {&#10;        return webhook;&#10;    }&#10;&#10;    public void setWebhook(String webhook) {&#10;        this.webhook = webhook;&#10;    }&#10;&#10;    public String getAccessToken() {&#10;        return accessToken;&#10;    }&#10;&#10;    public void setAccessToken(String accessToken) {&#10;        this.accessToken = accessToken;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/service/QualifierService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/bajajfinserv/qualifier/service/QualifierService.java" />
              <option name="originalContent" value="package com.bajajfinserv.qualifier.service;&#10;&#10;import com.bajajfinserv.qualifier.dto.SolutionRequest;&#10;import com.bajajfinserv.qualifier.dto.WebhookRequest;&#10;import com.bajajfinserv.qualifier.dto.WebhookResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.context.event.ApplicationReadyEvent;&#10;import org.springframework.context.event.EventListener;&#10;import org.springframework.http.HttpEntity;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpMethod;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;@Service&#10;public class QualifierService {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(QualifierService.class);&#10;&#10;    @Autowired&#10;    private RestTemplate restTemplate;&#10;&#10;    // Replace these with your actual details&#10;    private static final String NAME = &quot;Megha Daw&quot;;&#10;    private static final String REG_NO = &quot;22BEE0058&quot;; // Even number for Question 2&#10;    private static final String EMAIL = &quot;meghadaw48954@gmail.com&quot;;&#10;&#10;    private static final String WEBHOOK_GENERATE_URL = &quot;https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA&quot;;&#10;    private static final String WEBHOOK_TEST_URL = &quot;https://bfhldevapigw.healthrx.co.in/hiring/testWebhook/JAVA&quot;;&#10;&#10;    @EventListener(ApplicationReadyEvent.class)&#10;    public void executeQualifierFlow() {&#10;        logger.info(&quot;Starting qualifier test flow...&quot;);&#10;&#10;        try {&#10;            // Step 1: Generate webhook&#10;            WebhookResponse webhookResponse = generateWebhook();&#10;&#10;            if (webhookResponse != null &amp;&amp; webhookResponse.getAccessToken() != null) {&#10;                logger.info(&quot;Webhook generated successfully&quot;);&#10;                logger.info(&quot;Access Token received: {}&quot;, webhookResponse.getAccessToken());&#10;                logger.info(&quot;Webhook URL: {}&quot;, webhookResponse.getWebhook());&#10;&#10;                // Step 2: Solve SQL problem (Question 2)&#10;                String sqlSolution = solveSQLProblem();&#10;&#10;                // Step 3: Submit solution&#10;                submitSolution(webhookResponse.getAccessToken(), sqlSolution);&#10;            } else {&#10;                logger.error(&quot;Failed to generate webhook or received null response&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error in qualifier flow: &quot;, e);&#10;        }&#10;    }&#10;&#10;    private WebhookResponse generateWebhook() {&#10;        try {&#10;            logger.info(&quot;Generating webhook for regNo: {}&quot;, REG_NO);&#10;            WebhookRequest request = new WebhookRequest(NAME, REG_NO, EMAIL);&#10;&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.set(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;&#10;            HttpEntity&lt;WebhookRequest&gt; entity = new HttpEntity&lt;&gt;(request, headers);&#10;&#10;            ResponseEntity&lt;WebhookResponse&gt; response = restTemplate.exchange(&#10;                WEBHOOK_GENERATE_URL,&#10;                HttpMethod.POST,&#10;                entity,&#10;                WebhookResponse.class&#10;            );&#10;&#10;            logger.info(&quot;Webhook generation response status: {}&quot;, response.getStatusCode());&#10;            return response.getBody();&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error generating webhook: &quot;, e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private String solveSQLProblem() {&#10;        // SQL solution for Question 2: Calculate younger employees count by department&#10;        String sqlQuery = &quot;SELECT &quot; +&#10;                &quot;e1.EMP_ID, &quot; +&#10;                &quot;e1.FIRST_NAME, &quot; +&#10;                &quot;e1.LAST_NAME, &quot; +&#10;                &quot;d.DEPARTMENT_NAME, &quot; +&#10;                &quot;COUNT(e2.EMP_ID) AS YOUNGER_EMPLOYEES_COUNT &quot; +&#10;                &quot;FROM EMPLOYEE e1 &quot; +&#10;                &quot;JOIN DEPARTMENT d ON e1.DEPARTMENT = d.DEPARTMENT_ID &quot; +&#10;                &quot;LEFT JOIN EMPLOYEE e2 ON e1.DEPARTMENT = e2.DEPARTMENT &quot; +&#10;                &quot;AND e2.DOB &gt; e1.DOB &quot; +&#10;                &quot;GROUP BY e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, d.DEPARTMENT_NAME &quot; +&#10;                &quot;ORDER BY e1.EMP_ID DESC&quot;;&#10;&#10;        logger.info(&quot;SQL Solution prepared: {}&quot;, sqlQuery);&#10;        return sqlQuery.trim();&#10;    }&#10;&#10;    private void submitSolution(String accessToken, String sqlQuery) {&#10;        try {&#10;            logger.info(&quot;Submitting solution to webhook...&quot;);&#10;            SolutionRequest solutionRequest = new SolutionRequest(sqlQuery);&#10;&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.set(&quot;Authorization&quot;, accessToken);&#10;            headers.set(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;&#10;            HttpEntity&lt;SolutionRequest&gt; entity = new HttpEntity&lt;&gt;(solutionRequest, headers);&#10;&#10;            ResponseEntity&lt;String&gt; response = restTemplate.exchange(&#10;                WEBHOOK_TEST_URL,&#10;                HttpMethod.POST,&#10;                entity,&#10;                String.class&#10;            );&#10;&#10;            logger.info(&quot;Solution submitted successfully. Status: {}&quot;, response.getStatusCode());&#10;            logger.info(&quot;Response: {}&quot;, response.getBody());&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error submitting solution: &quot;, e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.bajajfinserv.qualifier.service;&#10;&#10;import com.bajajfinserv.qualifier.dto.SolutionRequest;&#10;import com.bajajfinserv.qualifier.dto.WebhookRequest;&#10;import com.bajajfinserv.qualifier.dto.WebhookResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.context.event.ApplicationReadyEvent;&#10;import org.springframework.context.event.EventListener;&#10;import org.springframework.http.HttpEntity;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpMethod;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;@Service&#10;public class QualifierService {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(QualifierService.class);&#10;&#10;    @Autowired&#10;    private RestTemplate restTemplate;&#10;&#10;    // Replace these with your actual details&#10;    private static final String NAME = &quot;Megha Daw&quot;;&#10;    private static final String REG_NO = &quot;22BEE0058&quot;; // Even number for Question 2&#10;    private static final String EMAIL = &quot;meghadaw48954@gmail.com&quot;;&#10;&#10;    private static final String WEBHOOK_GENERATE_URL = &quot;https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA&quot;;&#10;    private static final String WEBHOOK_TEST_URL = &quot;https://bfhldevapigw.healthrx.co.in/hiring/testWebhook/JAVA&quot;;&#10;&#10;    @EventListener(ApplicationReadyEvent.class)&#10;    public void executeQualifierFlow() {&#10;        logger.info(&quot;Starting qualifier test flow...&quot;);&#10;&#10;        try {&#10;            // Step 1: Generate webhook&#10;            WebhookResponse webhookResponse = generateWebhook();&#10;&#10;            if (webhookResponse != null &amp;&amp; webhookResponse.getAccessToken() != null) {&#10;                logger.info(&quot;Webhook generated successfully&quot;);&#10;                logger.info(&quot;Access Token received: {}&quot;, webhookResponse.getAccessToken());&#10;                logger.info(&quot;Webhook URL: {}&quot;, webhookResponse.getWebhook());&#10;&#10;                // Step 2: Solve SQL problem (Question 2)&#10;                String sqlSolution = solveSQLProblem();&#10;&#10;                // Step 3: Submit solution&#10;                submitSolution(webhookResponse.getAccessToken(), sqlSolution);&#10;            } else {&#10;                logger.error(&quot;Failed to generate webhook or received null response&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error in qualifier flow: &quot;, e);&#10;        }&#10;    }&#10;&#10;    private WebhookResponse generateWebhook() {&#10;        try {&#10;            logger.info(&quot;Generating webhook for regNo: {}&quot;, REG_NO);&#10;            WebhookRequest request = new WebhookRequest(NAME, REG_NO, EMAIL);&#10;&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.set(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;&#10;            HttpEntity&lt;WebhookRequest&gt; entity = new HttpEntity&lt;&gt;(request, headers);&#10;&#10;            ResponseEntity&lt;WebhookResponse&gt; response = restTemplate.exchange(&#10;                WEBHOOK_GENERATE_URL,&#10;                HttpMethod.POST,&#10;                entity,&#10;                WebhookResponse.class&#10;            );&#10;&#10;            logger.info(&quot;Webhook generation response status: {}&quot;, response.getStatusCode());&#10;            return response.getBody();&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error generating webhook: &quot;, e);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private String solveSQLProblem() {&#10;        // SQL solution for Question 2: Calculate younger employees count by department&#10;        String sqlQuery = &quot;&quot;&quot;&#10;            SELECT &#10;                e1.EMP_ID,&#10;                e1.FIRST_NAME,&#10;                e1.LAST_NAME,&#10;                d.DEPARTMENT_NAME,&#10;                COUNT(e2.EMP_ID) AS YOUNGER_EMPLOYEES_COUNT&#10;            FROM EMPLOYEE e1&#10;            JOIN DEPARTMENT d ON e1.DEPARTMENT = d.DEPARTMENT_ID&#10;            LEFT JOIN EMPLOYEE e2 ON e1.DEPARTMENT = e2.DEPARTMENT &#10;                AND e2.DOB &gt; e1.DOB&#10;            GROUP BY e1.EMP_ID, e1.FIRST_NAME, e1.LAST_NAME, d.DEPARTMENT_NAME&#10;            ORDER BY e1.EMP_ID DESC&#10;            &quot;&quot;&quot;;&#10;        &#10;        logger.info(&quot;SQL Solution prepared: {}&quot;, sqlQuery);&#10;        return sqlQuery.trim();&#10;    }&#10;&#10;    private void submitSolution(String accessToken, String sqlQuery) {&#10;        try {&#10;            logger.info(&quot;Submitting solution to webhook...&quot;);&#10;            SolutionRequest solutionRequest = new SolutionRequest(sqlQuery);&#10;&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.set(&quot;Authorization&quot;, accessToken);&#10;            headers.set(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;&#10;            HttpEntity&lt;SolutionRequest&gt; entity = new HttpEntity&lt;&gt;(solutionRequest, headers);&#10;&#10;            ResponseEntity&lt;String&gt; response = restTemplate.exchange(&#10;                WEBHOOK_TEST_URL,&#10;                HttpMethod.POST,&#10;                entity,&#10;                String.class&#10;            );&#10;&#10;            logger.info(&quot;Solution submitted successfully. Status: {}&quot;, response.getStatusCode());&#10;            logger.info(&quot;Response: {}&quot;, response.getBody());&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Error submitting solution: &quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="updatedContent" value="spring.application.name=qualifier-test&#10;logging.level.com.bajajfinserv.qualifier=INFO&#10;logging.level.org.springframework.web.client=DEBUG&#10;&#10;# H2 Database configuration (optional, for local testing)&#10;spring.datasource.url=jdbc:h2:mem:testdb&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=password&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;spring.h2.console.enabled=true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>